== Headline ==

Basic OO programming in [[Language:Java]]
== Characteristics ==

Basic style of [[OO programming]] is applied. A simple [[object model]] is provided for [[Feature:Hierarchical_company]]. The object model leverages [[object composition]] to compose companies from (nested) departments and employees. The operations for [[Feature:Total]] and [[Feature:Cut]] are implemented as [[instance method]]s on the classes for companies, departments, and employees. [[Closed serialization]] is enabled for all the classes with the help of Java's [[Technology:Object Streams]]. To this end, the [[Marker interface pattern|marker interface]] ''Serializable'' is applied to the classes of the object model for companies. This form of serialization counts as [[closed serialization]] because the serialization format is definitely Java-specific.
== Illustration ==

The data model is implemented as [[POJO]]s. For example [[Feature:Company]] looks like this:

<fragment url="src/main/java/org/softlang/company/model/Company.java/class/Company"/>

[[Feature:Closed serialization]] is implemented using [[Language:Java]] [[Technology:Object Streams]]:

<fragment url="src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/deserializeCompany"/>

<fragment url="src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/serializeCompany"/>

[[Feature:Total]] and [[Feature:Cut]] are implemented as calls of [[POJO]] methods:

<fragment url="src/main/java/org/softlang/company/features/Total.java/class/Total/method/total"/>

<fragment url="src/main/java/org/softlang/company/features/Cut.java/class/Cut/method/cut"/>

Test cases are implemented for all [[Namespace:Feature]]s.
== Relationships ==

For basic OO without inheritance see [[Contribution:javaComposition]].

For basic OO with inheritance see [[Contribution:javaInheritance]].

For modular OO programming with static methods see [[Contribution:javaStatic]].

For use of Java reflection see [[Contribution:javaReflection]] (data processing) and [[Contribution:javaSyb]] (SYB-style generic programming).

For design patterns see [[Contribution:javaTemplate]] (template design pattern), [[Contribution:javaVisitor]] (visitor design pattern) and [[Contribution:javaExorcism]] (excessive illustration of design patterns).
== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.model for implementations of [[Feature:Company]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.
== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md
== Metadata ==

* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:Thomas Schmorleiz]]
* [[developedBy::Contributor:Ralf LÃ¤mmel]]
* [[instanceOf::Namespace:Contribution]]