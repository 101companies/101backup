== Headline ==

A [[build automation tool]] for [[Language:Haskell]]



== Illustration ==

Consider the [[Hello world program]] for Haskell:

<syntaxhighlight lang="haskell">
main = putStrLn "Hello, world!"
</syntaxhighlight>

Now let's do packaging and build automation for this program. To this end, we set up the following Cabal file:

<syntaxhighlight lang="text">
-- Initial helloWorld.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                helloWorld
version:             0.1.0.0
synopsis:            Demonstration of Cabal
description:         Just filled in to make "cabal check" go quiet.
homepage:            http://101companies.org/wiki/Technology:Cabal
license:             MIT
license-file:        LICENSE
author:              Joe Hackathon
maintainer:          101companies@gmail.com
-- copyright:           
category:            Testing
build-type:          Simple
cabal-version:       >=1.8

executable helloWorld
   main-is:            Main.hs
   other-modules:       
  build-depends:       base ==4.5.*
  hs-source-dirs:      src
</syntaxhighlight>

As one can see at the top, the initial file was actually generated with "cabal init" such that some parameters are filled in interactively, but a few subsequent modifications were applied to the file manually.

With this Cabal file in place, the program can be built and ran at the command line as follows:

<syntaxhighlight lang="text">
        cabal configure
        cabal build
        dist/build/helloWorld/helloWorld
</syntaxhighlight>

The configure step checks the Cabal file and resolves external dependencies, if necessary. The build step compiles all involved modules. Thus, an executable can be invoked in the last step.



== Metadata ==

* [[instanceOf::Build tool]]
* [[instanceOf::Haskell technology]]
* [[identifies::http://www.haskell.org/cabal/]]
* [[relatesTo::Technology:HackageDB]]
* [[instanceOf::Namespace:Technology]]