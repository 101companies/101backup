== Headline ==

Use [[Language:TGraphs]] with [[Technology:JGraLab]] in [[Language:Java]] for [[Model to Model transformation]]s

== Motivation ==

[[Model to Model transformation]]s with TGraphs are excercised in this implementation. The Cut feature shows an [[endogenous model transformation]], the Total feature is an example for an [[exogenous model transformation]]. TGraphs are typed, attributed, ordered, and directed graphs. TGraphs can be maintained in a repository and programmatically processed. One can clearly use TGraphs to represent companies. In fact, a TGraphs schema defines the structure of companies. One can then use supplementary languages and technologies to query and transform such graphs so that typical operations on companies are implemented. In particular, [[Technology:JGraLab]] supports Java-class generation from a TGraphs schema, and query evaluation with [[Language:GReQL]] on TGraphs. [[Transformation]]s can be performed with [[Language:GReTL]] or ''plain'' Java based on the schema-derived API.


== Architecture ==

The file ''101companies-schema.xmi'' is the schema TGraph that represents the data
structure for companies. This file was exported from the IBM Rational Software Architect (RSA) tool and is based on a simple UML class diagram. The file ''101companies-schema.pdf'' illustrates the UML class diagram that was modeled to represent the schema. The file ''101companies-schema.emx'' is the original IBM RSA model file. Once generated, the file ''101companies-schema.tg''

The jgralab.jar contains the core technology for creating and operating on TGraphs. It also contains the facilities for using GReQL. The gretl.jar contains GReTL for modifying TGraphs.

Package ''src.de.uni koblenz.oneoonecompanies'' contains a programmer-defined class ''CompanyServices'' that provides an API for several operations on TGraphs. Packages ''src.de.uni koblenz.oneoonecompanies.schema'' and ''...schema.impl.std'' contain schema-derived interfaces and classes for companies.
	
== Usage ==

* The implementation is provided as an Eclipse project.
* Run ''build.xml'' with ant to generate schema-derived classes and interfaces. 
* There are tests in package ''...tests''.
** Run JUnit test ''Serialization'' to exercise serialization.
** Run JUnit test ''Operations'' to exercise the basic operations.
** Run main method of ''Visualization'' to visualize the company graph.

Please note: Upon initial checkout and whenever the TGraphs schema ''101companies-schema.xmi''
is changed, then code generation must be re-executed. To this end, run ''ant'' on the included 
''build.xml'' file from the command line or from within Eclipse. This process re-generates 
all types in the packages ''...schema'' and ''...schema.impl.std''.  These packages provide
the API for ''CompanyServices''.

== Metadata ==
* [[uses::Language:TGraphs]]
* [[uses::Language:GReQL]]
* [[uses::Language:GReTL]]
* [[uses::Language:Java]]
* [[uses::Technology:JGraLab]]
* [[uses::Technology:GReTL]]
* [[uses::Technology:Graphviz]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Mentoring]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:Tassilo Horn]]
* [[developedBy::Contributor:Mahdi Derakhshanmanesh]]
* [[reviewedBy::Contributor:Ralf LÃ¤mmel]]
* [[instanceOf::Theme:MDE]]
* [[identifies::http://www.uni-koblenz-landau.de/koblenz/fb4/institute/IST/RGEbert/MainResearch-en/Graphtechnology/tgraphs?set language=en]]
* [[instanceOf::Namespace:Contribution]]