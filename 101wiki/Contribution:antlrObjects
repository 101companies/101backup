== Headline ==

Object/Text mapping for Java with [[Technology:ANTLR]] for parsing.
== Characteristics ==

An [[Technology:ANTLR]]-based parser for a concrete syntax of companies is provided. The underlying grammar is LL(1). The parser translates text into company objects. To this end, a straightforward object model for companies is used. (In fact, the object model is very similar to the one of [[Contribution:javaComposition]]. The mapping is described by the semantic actions within the [[Technology:ANTLR]]-based parser description. Pretty printing is also supported in the manner that objects can be exported in the concrete syntax. Pretty printing provides an implementation of [[Feature:Unparsing]]. Basic operations are implemented on top of the object model in basic OO programming style.
== Illustration ==

The data model is implemented as [[POJO]]s. For example [[Feature:Company]] looks like this:

<fragment url="src/main/java/org/softlang/company/model/Company.java/class/Company"/>

A Parser for [[Feature:Company]] will be generated by [[Technology:ANTLR]] using src/main/antlr/Company.g.

A Company if defined by:

<syntaxhighlight lang="antlr">
company returns [Company c]:
  { $c = new Company(); }
  'company' STRING
  { $c.setName($STRING.text); }
  '{' 
  ( topdept=department
    { $c.getDepts().add($topdept.d); }
  )* 
  '}'
  ;
</syntaxhighlight>

[[Feature:Parsing]] is implemented using the generated Parser:

<fragment url="src/main/java/org/softlang/company/features/Parsing.java/class/Parsing"/>

[[Feature:Unparsing]] pretty prints the company:

<fragment url="src/main/java/org/softlang/company/features/Unparsing.java/class/Unparsing/method/unparseCompany"/>

[[Feature:Total]] and [[Feature:Cut]] are implemented using [[POJO]] methods:

<fragment url="src/main/java/org/softlang/company/features/Total.java/class/Total"/>

<fragment url="src/main/java/org/softlang/company/features/Cut.java/class/Cut"/>

Test cases are implemented for all [[Namespace:Feature]]s. There are also a valid and an invalid input:

<fragment url="inputs/sample.Company"/>

<fragment url="inputs/nonSample.Company"/>
== Relationships ==
This contribution shows [[Object-Text mapping]] using [[Technology:ANTLR]] and [[Language:Java]].
For plain syntax checking with [[Technology:ANTLR]] see [[Contribution:antlrAcceptor]].
For a basic example of lexing/tokenization with [[Technology:ANTLR]] see [[Contribution:antlrLexer]].
For an implementation of [[Feature:Parsing]] using semantic actions with [[Technology:ANTLR]] see [[Contribution:antlrParser]]
For walking a parsed [[Feature:Company]]-tree with [[Technology:ANTLR]] see [[Contribution:antlrTrees]].
== Architecture ==
The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/antlr contains grammar files for [[Technology:ANTLR]].
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.model for implementations of [[Feature:Company]].
** org.softlang.company.antlr for [[Technology:ANTLR]]-generated Java classes (post build).
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.
== Usage ==
This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md
== Metadata ==
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[instanceOf::Theme:ANTLR]]
* [[instanceOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[developedBy::Contributor:Ralf LÃ¤mmel]]
* [[instanceOf::Namespace:Contribution]]
