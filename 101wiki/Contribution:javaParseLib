== Headline ==

Parse companies with parser combinators in [[Language:Java]]

== Characteristics ==

We implement a functor-based combinator library for top-down parsing with which we parse concrete textual syntax for companies. Such parsing implements [[Feature:Parsing]]. Salaries can be totaled along with parsing. The library supports plain acceptance and proper parsing into an intermediate representation. There are acceptor and parser combinators for all common EBNF constructs as well as building blocks for lexical analysis. Class inheritance can also be used to attach semantic actions to applications of parser combinators.

== Illustration ==

The data model is implemented as plain textual files:

<fragment url="inputs/sample.Company"/>

[[Feature:Parsing]] is implemented with helper classes using the library:

<fragment url="src/main/java/org/softlang/company/features/Parsing.java/class/Parsing"/>

Helper org.softlang.company.features.parser.CompanyParser:

<fragment url="src/main/java/org/softlang/company/features/parser/CompanyParser.java/class/CompanyParser/method/company"/>

[[Feature:Total]] is implemented as part of [[Feature:Parsing]] with a semantic action:

<fragment url="src/main/java/org/softlang/company/features/Total.java/class/Total/method/total"/>

Test cases are implemented for all [[Namespace:Feature]]s. There is also an invalid input:

<fragment url="inputs/nonSample.Company"/>

== Relationships ==

For plain syntax checking with [[Technology:ANTLR]] see [[Contribution:antlrAcceptor]].

For lexer-based text processing in pure [[Language:Java]] see [[Contribution:javaScanner]].


For lexing/tokenization with [[Technology:ANTLR]] see [[Contribution:antlrLexer]].

For a custom made lexer in pure [[Language:Java]] see [[Contribution:javaLexer]].


For parsing with semantic actions with [[Technology:ANTLR]] see [[Contribution:antlrParser]].

For recursive-descent parsing in pure [[Language:Java]]] see [[Contribution:javaParser]].

For parser combinators in pure [[Language:Java]]] see [[Contribution:javaParseLib]].


For object/text mapping from test to companies with [[Technology:ANTLR]] see [[Contribution:antlrObjects]].

For object/text mapping from text to trees with [[Technology:ANTLR]] see [[Contribution:antlrTrees]].

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** javaf.prelude for function patterns.
** parseLib.acceptor for accaptance.
** parseLib.parser for parsing.
** parseLib.util for type declarations.
** org.softlang.company.features for implementations of [[Functional requirements]].
*** org.softlang.company.features.parser for lexer, acceptor and parser for companies.
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.
** parseLib.tests for [[Technology:JUnit]] test cases for the parse library.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:Ralf LÃ¤mmel]]
* [[instanceOf::Namespace:Contribution]]