== Headline ==

Report the [[median]] of all salaries in a company
== Description ==

Management would like to know the median of all salaries in a company. This value may be used for decision making during performance interviews, e.g., in the sense that any employee who has shown exceptional performance gets a raise, if the individual salary is well below the current median. Further, the median may also be communicated to employees so that they can understand their individual salary on the salary scale of the company. In practice, medians of more refined groups of employees would be considered, e.g., employees with a certain job role, seniority level, or gender.
== Motivation ==

This feature triggers a very basic statistical computation, i.e., the computation of the median of a list of sorted values. Of course, the median is typically available as a primitive or from a library, but when coded explicitly, it is an  exercise in list processing. This feature may also call for reuse such that code is shared with the implementation of [[Feature:Total]] because both features operate on the list of all salaries.
== Illustration ==

The following code stems from [[Contribution:haskellStarter]]:

<syntaxhighlight lang="haskell">
-- Median of all salaries in a company
median :: Company -> Salary
median = medianSorted . sort . salaries
</syntaxhighlight>

First, the salaries are to be extracted from the company. Second, the extracted salaries are to be sorted, where a library function ''sort'' is used here. Third, the sorted list of salaries is to be processed to find the median.

<syntaxhighlight lang="haskell">
-- Extract all salaries in a company
salaries :: Company -> [Salary]
salaries (n, es) = getSalaries es

-- Extract all salaries of lists of employees
getSalaries :: [Employee] -> [Salary]
getSalaries [] = []
getSalaries (e:es) = getSalary e : getSalaries es

-- Extract the salary from an employee
getSalary :: Employee -> Salary
getSalary (_, _, s) = s
</syntaxhighlight>

<syntaxhighlight lang="haskell">
-- Median of a sorted list
medianSorted [] = error "Cannot compute median on empty list."
medianSorted [x] = x
medianSorted [x,y] = (x+y)/2
medianSorted l = medianSorted (init (tail l))
</syntaxhighlight>
== Relationships ==

* See [[Feature:Total]] for another query scenario which also processes the salaries of all employees in a company.
== Metadata ==

* [[isA::Functional requirement]]
* [[isA::Optional feature]]
* [[instanceOf::Namespace:Feature]]