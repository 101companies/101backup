== Headline ==

A [[monad]] for synthesizing results or [[output]]
== Illustration ==

Let us put to work the writer monad in a simple interpreter.

There are these expression forms:

<syntaxhighlight lang="haskell">
-- Simple Boolean expressions
data Expr = Const Bool | And Expr Expr | Or Expr Expr
  deriving (Eq, Show, Read)
</syntaxhighlight>

For instance, the following expression should evaluate to true:

<syntaxhighlight lang="haskell">
-- A sample term with two operations
sample = And (Const True) (Or (Const False) (Const True))
</syntaxhighlight>

Here is a simple interpreter, indeed:

<syntaxhighlight lang="haskell">
-- Straigthforward interpreter
eval :: Expr -> Bool
eval (Const b) = b
eval (And e1 e2) = eval e1 && eval e2
eval (Or e1 e2) = eval e1 || eval e2
</syntaxhighlight>

Now suppose that the interpreter should also return the number of operations applied. We count ''And'' and ''Or''as operations. Thus, the sample term should count as 2. We may incorporate counting into the initial interpreter as follows:

<syntaxhighlight lang="haskell">
-- Interpreter with counting operations
-- Interpreter with counting operations
eval' :: Expr -> (Bool, Int)
eval' (Const b) = (b, 0)
eval' (And e1 e2) = 
  let 
   (b1,i) = eval' e1
   (b2,i') = eval' e2
  in (b1 && b2, i+i'+1) 
eval' (Or e1 e2) = 
  let 
   (b1,i) = eval' e1
   (b2,i') = eval' e2
  in (b1 || b2, i+i'+1) 
</syntaxhighlight>

Alas, the resulting interpreter is harder to understand. The collection of counts is entangled with the basic logic. By conversion to monadic style, we can hide counting except when we need increment the counter. We use the writer monad here so that we simply combine counts from subexpression (as also done in the non-monadic code above). We could also be using the [[state monad]], if we wanted to really track the operations counter along evaluation; this would be useful if we were adding an expression form for retrieving the count.

<syntaxhighlight lang="haskell">
-- Monadic style interpreter
evalM :: Expr -> Writer (Sum Int) Bool
evalM (Const b) = return b
evalM (And e1 e2) = 
  evalM e1 >>= \b1 ->
  evalM e2 >>= \b2 ->
  tell (Sum 1) >> 
  return (b1 && b2)
evalM (Or e1 e2) = 
  evalM e1 >>= \b1 ->
  evalM e2 >>= \b2 ->
  tell (Sum 1) >> 
  return (b1 || b2)
</syntaxhighlight>

We can also use do notation:

<syntaxhighlight lang="haskell">
-- Monadic style interpreter in do notation
evalM' :: Expr -> Writer (Sum Int) Bool
evalM' (Const b) = return b
evalM' (And e1 e2) = do
  b1 <- evalM' e1
  b2 <- evalM' e2
  tell (Sum 1)
  return (b1 && b2)
evalM' (Or e1 e2) = do
  b1 <- evalM' e1
  b2 <- evalM' e2
  tell (Sum 1)
  return (b1 || b2)
</syntaxhighlight>

The data type for the state monad looks like this:

<syntaxhighlight lang="haskell">
-- Computations as pairs of value and "output"
newtype Writer w a = Writer { runWriter :: (a, w) }
</syntaxhighlight>

Thus, a stateful computation is basically a function a value with some output. The output type is assumed to be [[monoid]] because an empty output and the combination of outputs is uniformly defined in this manner.

The corresponding instance of the [[type class]] ''Monad'' follows:

<syntaxhighlight lang="haskell">
-- Monad instance for Writer
instance Monoid w => Monad (Writer w)
  where
    return a = Writer (a, mempty)
    (Writer (a, w)) >>= f =
      let (Writer (b, w')) = f a in
        (Writer (b, w `mappend` w'))
</syntaxhighlight>

The definition of ''return'' conveys that a pure computation produces the empty output. The definition of ''bind'' conveys that outputs are to be combined (in a certain order) from the operands of ''bind''. Finally, we need to define the writer-specific operation ''tell'' for producing ouput:

<syntaxhighlight lang="haskell">
-- Produce output
tell :: w -> Writer w ()
tell w = Writer ((), w)
</syntaxhighlight>

See [[Contribution:haskellWriter]] for a contribution which uses the [[writer monad]].
== Metadata ==
* [[linksTo::http://en.wikipedia.org/wiki/Monad (functional programming)#Writer monad]]
* [[linksTo::http://dl.acm.org/citation.cfm?id=647698.734150]]
* [[linksTo::http://books.google.com/books?id=miO8bwAACAAJ]]
* [[isA::Monad]]
* [[instanceOf::Vocabulary:Functional programming]]
* [[instanceOf::Namespace:Concept]]