== Headline == 

[[Concurrent programming]] and [[STM]] in [[Language:Haskell]] with [[TMVar]]s

== Motivation ==

The implementation demonstrates [[concurrent programming]] and specifically [[STM]] in [[Language:Haskell]] with Haskell's concept of [[TMVar]]s, i.e., transactional [[MVar]]s. To this end, the computations for the operations for totaling and cutting salaries are organized in multiple threads, in fact, transactions based on [[TMVar]]s. (See [[Contribution:mvar]] for a more basic approach that uses regular thread synchronization variables, i.e., [[MVar]]s.) The TMVars are used to store the progress and intermediate results of computations across multiple threads. The <syntaxhighlight lang="haskell" enclose="none">retry</syntaxhighlight> combinator is leveraged to wait for certain values of transactional variables. Overall, the present implementation serves as a limited illustration of [[STM]] since the operations in question do not obviously benefit from STM.

== Illustration ==

In the following we will illustrate both the implementation of totaling and cutting. To explain the code we first introduce a way to store and handle progress of computation, wait for results and enable multi-threaded cutting/totaling.

=== Representing and handling computational progress ===

We represent positions of interest for the next computation/transaction by using the zipper related term of focus (see the [[Contribution:wxHaskell|wxHaskell implementation]] for more information). A algebraic datatype for progress can therefore be defined as follows:

<syntaxhighlight lang="haskell" source="haskellConcurrent/Types.hs">
data Progress a = Do a | Done  

type TFocusProgress = TMVar (Progress Focus)
</syntaxhighlight>

The progress of a computation can either be that there is still some work to do or that all work is done. In the first case the corresponding type constructor takes a value providing some information about the computation to be executed. Here we use a value of the <syntaxhighlight lang="haskell" enclose="none">Focus</syntaxhighlight> type. This <syntaxhighlight lang="haskell" enclose="none">TFocusProgress</syntaxhighlight> datatype is defined as an <syntaxhighlight lang="haskell" enclose="none">MVar</syntaxhighlight> because it should be shared among multiple threads. It is a transactional <syntaxhighlight lang="haskell" enclose="none">MVar</syntaxhighlight> (<syntaxhighlight lang="haskell" enclose="none">TMVar</syntaxhighlight>) because the manipulation of the progress will be part of the transaction: Each total/cut transaction will call <syntaxhighlight lang="haskell" enclose="none">nextEmployeeFocus</syntaxhighlight> to update the progress. This function is illustrated in the following image:

http://images6.fanpop.com/image/photos/32900000/Cat-cats-32958715-1440-900.jpg

The blue arrows illustrate the function. Each time <syntaxhighlight lang="haskell" enclose="none">nextEmployeeFocus :: Company -> Focus -> Maybe Focus</syntaxhighlight> is called to compute a new focus of interest the function either returns a new focus (<syntaxhighlight lang="haskell" enclose="none">Just focus</syntaxhighlight>) or <syntaxhighlight lang="haskell" enclose="none">Nothing</syntaxhighlight> in case all employees are processed. In the following we make use of this function to define a generic transaction function.

=== Generic companies transaction ===

We can now define a general transaction for both total and cut:

<syntaxhighlight lang="haskell" source="haskellConcurrent/CompanySTM.hs" line>
companyTransaction :: Company -> TFocusProgress -> TMVar b -> (Focus -> b -> b) -> STM Bool
companyTransaction c tprogress tb f = do
    currentProgress <- readTMVar tprogress
    case currentProgress of
        (Do currentFocus) -> do
            currentB <- readTMVar tb
            let newB = f c currentFocus currentB
            swapTMVar tb newB
            case nextEmployeeFocus c currentFocus of
                Just newFocus -> do
                    swapTMVar tprogress (Do newFocus)
                    return False
                Nothing -> do
                    swapTMVar tprogress Done
                    return True
        Done -> return False
</syntaxhighlight>

This function takes a company, a transactional progress and some other transactional variable which will be used in the concrete transaction. <syntaxhighlight lang="haskell" enclose="none">companyTransaction</syntaxhighlight> also takes a function that transforms the value of the content of the transactional variable based on a given focus.
That is, in line 3 <syntaxhighlight lang="haskell" enclose="none">companyTransaction</syntaxhighlight> reads the current progress and matches on the type constructors afterwards. In case all work is done (type constructor <syntaxhighlight lang="haskell" enclose="none">Done</syntaxhighlight>) the function returns <syntaxhighlight lang="haskell" enclose="none">True</syntaxhighlight> in line 16. In case there is still work to do <syntaxhighlight lang="haskell" enclose="none">companyTransaction</syntaxhighlight> reads the current value of the second transactional variable and passes this value and the current focus to the given function <syntaxhighlight lang="haskell" enclose="none">f</syntaxhighlight> in lines 6 - 7. The result of <syntaxhighlight lang="haskell" enclose="none">f</syntaxhighlight> is then written in the transaction variable by swapping the content in line 8. After that the next focus is computed using <syntaxhighlight lang="haskell" enclose="none">nextEmployeeFocus</syntaxhighlight>. Lines 13 and 10 match either on <syntaxhighlight lang="haskell" enclose="none">Just newFocus</syntaxhighlight> or <syntaxhighlight lang="haskell" enclose="none">Nothing</syntaxhighlight>. In case there is a next focus this value is swapped in the progress variable and <syntaxhighlight lang="haskell" enclose="none">False</syntaxhighlight> is returned in line 12. Otherwise <syntaxhighlight lang="haskell" enclose="none">Done</syntaxhighlight> is put in the variable for progress and <syntaxhighlight lang="haskell" enclose="none">True</syntaxhighlight> is returned.

=== Waiting for results ===

We also provide a generic transaction that waits for a job to be done and returns the result of the job:

<syntaxhighlight lang="haskell" source="haskellConcurrent/CompanySTM.hs" line>
getResult :: TFocusProgress -> TMVar a -> STM a
getResult tprogress ta = do
    currentProgress <- readTMVar tprogress
    case currentProgress of
        (Do  ) -> retry
        Done    -> do
            result <- readTMVar ta
            return result
</syntaxhighlight>

In line 3 <syntaxhighlight lang="haskell" enclose="none">getResult</syntaxhighlight> reads the current progress of the transaction. If there is still work to do the function matches on <syntaxhighlight lang="haskell" enclose="none">Do  </syntaxhighlight>. In this case we use the <syntaxhighlight lang="haskell" enclose="none">retry</syntaxhighlight> combinator which blocks the current thread until the content of the transactional variable for progress in modified. In case all transactions are done the function matches on <syntaxhighlight lang="haskell" enclose="none">Done</syntaxhighlight> in line 6. It then reads the result from the transactional variable <syntaxhighlight lang="haskell" enclose="none">ta</syntaxhighlight> and returns the content.

=== Using multiple threads ===

We make use of <syntaxhighlight lang="haskell" enclose="none">forkIO</syntaxhighlight> to start multiple threads for executing the transactions:

<syntaxhighlight lang="haskell" source="haskellConcurrent/CompanySTM.hs" line>
startTransactions :: Company -> b -> (TFocusProgress -> TMVar b -> STM Bool) -> IO b
startTransactions c initb trans = do
    case firstEmployeeFocus c of
        (Just firstFocus) -> do
            tprogress <- newTMVarIO (Do firstFocus)
            tb <- newTMVarIO initb
            forM [1..3] $ \  -> 
                forkIO $ repeatTransaction (trans tprogress tb)
            atomically $ getResult tprogress tb
        Nothing -> return initb
</syntaxhighlight>

This function takes a company, an initial value for the content of a transactional variable and a transaction function. It returns the result from the transactional variable.
To do this it first computes the first focus in question in line 3. In case this focus does not exist <syntaxhighlight lang="haskell" enclose="none">startTransactions</syntaxhighlight> returns the given initial value <syntaxhighlight lang="haskell" enclose="none">b</syntaxhighlight> in line 10. In case such a focus does exist <syntaxhighlight lang="haskell" enclose="none">b</syntaxhighlight> it put into an transactional variable in line 5. The value of <syntaxhighlight lang="haskell" enclose="none">b</syntaxhighlight> is also put in a transactional variable. After that <syntaxhighlight lang="haskell" enclose="none">startTransactions</syntaxhighlight> creates three threads, each one repetitively executing the transaction.
In line 9 the function waits for the result of the computation by using <syntaxhighlight lang="haskell" enclose="none">getResult</syntaxhighlight> which was shown above.

To execute the transaction until the computation is done we define <syntaxhighlight lang="haskell" enclose="none">repeatTransaction</syntaxhighlight> which should be straighforward:
<syntaxhighlight lang="haskell" source="haskellConcurrent/CompanySTM.hs" line>
repeatTransaction :: STM Bool -> IO ()
repeatTransaction t = do
	done <- atomically t
	unless done $ repeatTransaction t
</syntaxhighlight>


Now that we have defined generic functions for a company transaction, a function for waiting for results and a function for starting multiple threads to execute the transaction, we can define totaling and cutting salaries:

=== Total ===

We first define a transactional variable for holding the (intermediate) result of totaling:

<syntaxhighlight lang="haskell" source="haskellConcurrent/Total.hs" line>
type TTotal = TMVar Float
</syntaxhighlight>

The actual transaction for one step of totaling all salaries is defined as follows:

<syntaxhighlight lang="haskell" source="haskellConcurrent/Total.hs" line>
addSalary :: Company -> TFocusProgress -> TTotal -> STM Bool
addSalary c tprogress ttotal = companyTransaction c tprogress ttotal (f c) 
    where f c currentFocus currentTotal = currentTotal + (salary (readEM currentFocus c))
</syntaxhighlight>

<syntaxhighlight lang="haskell" enclose="none">addSalary</syntaxhighlight> uses the <syntaxhighlight lang="haskell" enclose="none">companyTransaction</syntaxhighlight>.
The actual computation is that it reads the employee at the current focus, reads the salary and adds it the current (intermediate) total.

We  can now use <syntaxhighlight lang="haskell" enclose="none">addSalary</syntaxhighlight> to define <syntaxhighlight lang="haskell" enclose="none">total</syntaxhighlight>:

<syntaxhighlight lang="haskell" source="haskellConcurrent/Total.hs" line>
total :: Company -> IO Float
total c = startTransactions c 0.0 (addSalary c)
</syntaxhighlight>

=== Cut ===

Cut also uses <syntaxhighlight lang="haskell" enclose="none">companyTransaction</syntaxhighlight> to do the cutting for each focus:

<syntaxhighlight lang="haskell" source="haskellConcurrent/Cut.hs" line>
cutSalary :: TFocusProgress -> TCompany -> STM Bool
cutSalary tprogress tcompany = do
    currentCompany <- readTMVar tcompany
    companyTransaction currentCompany tprogress tcompany f 
    where 
        f currentFocus currentCompany = (writeEM currentFocus currentCompany) (cutEmployee $ readEM currentFocus currentCompany)
        cutEmployee (Employee n a s) = Employee n a (s/2)
</syntaxhighlight>

It reads the employee at the given focus, cuts his/her salary and writes the employee back into the company by making use of <syntaxhighlight lang="haskell" enclose="none">readEM</syntaxhighlight> and <syntaxhighlight lang="haskell" enclose="none">writeEM</syntaxhighlight>.

Analogously to <syntaxhighlight lang="haskell" enclose="none">total</syntaxhighlight> we define <syntaxhighlight lang="haskell" enclose="none">cut</syntaxhighlight>:

<syntaxhighlight lang="haskell" source="haskellConcurrent/Cut.hs" line>
cut :: Company -> IO Company
cut c = startTransactions c c cutSalary
</syntaxhighlight>

== Usage ==

* [this!!Main.hs] has to be loaded into GHCi. 
* The <syntaxhighlight lang="haskell" enclose="none">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' for [[test automation]].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Technology:GHCi]]      
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Task parallelism]]
* [[developedBy::Contributor:Thomas Schmorleiz]]
* [[instanceOf::Namespace:Contribution]]