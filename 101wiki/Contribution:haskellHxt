== Headline ==

[[In-memory XML processing]] in [[Language:Haskell]] with [[Technology:HXT]] 

== Motivation ==

The implementation demonstrates [[XML processing]] in [[Language:Haskell]] with [[Technology:HXT]]'s combinator [[library]]. Operations for totaling and cutting salaries are accordingly composed from combinators for XML queries and transformations. The concept of [[arrow]]s is demonstrated by the implementation
as HXT's combinator library essentially relies on arrows.

== Illustration ==

In the following we will demonstrate the construction of an arrow for [[Feature:Total]] and how one can run this arrow in IO.

=== Total ===

We define a query for totaling all company salaries:

<syntaxhighlight lang="haskell" source="hxt/Total.hs" line>
total :: ArrowXml a => a XmlTree Float
total = listA (deep $ hasName "salary"
               >>> 
               getChildren  
               >>> 
               getText)     
        >>>
        arr (sum.(map read)) 
</syntaxhighlight>

In line 2 we query all salary nodes by using <syntaxhighlight lang="haskell" enclose="none">deep $ hasName "salary" :: ArrowXml a => a XmlTree XmlTree</syntaxhighlight>.
This is an arrow from <syntaxhighlight lang="haskell" enclose="none">XmlTree</syntaxhighlight> to <syntaxhighlight lang="haskell" enclose="none">XmlTree</syntaxhighlight>, say a filter for all salary nodes. In general  <syntaxhighlight lang="haskell" enclose="none">deep</syntaxhighlight> only finds non-nested results, but because of the fact that we are dealing with text nodes, which can not be nested, this is acceptable in this situation. In lines 2-6 the result of this arrow is then combined with <syntaxhighlight lang="haskell" enclose="none">getChildren >>> getText</syntaxhighlight> by using <syntaxhighlight lang="haskell"  enclose="none">>>></syntaxhighlight>. The new arrow of type <syntaxhighlight lang="haskell" enclose="none">ArrowXml a => a XmlTree String</syntaxhighlight> returns the text of each salary node.

We then use ''Control.Arrow.ArrowList'''s <syntaxhighlight lang="haskell" enclose="none">listA</syntaxhighlight> in line 2 to collect all results from this arrow in an array, giving us a new arrow of type <syntaxhighlight lang="haskell" enclose="none">ArrowXml a => a XmlTree [String]</syntaxhighlight>. 

In line 7 the result of this arrow is passed to the lifted version of <syntaxhighlight lang="haskell" enclose="none">(sum.(map read)) :: (Read c, Num c) => [String] -> c</syntaxhighlight>, which in this case is of type: <syntaxhighlight lang="haskell" enclose="none">ArrowXml a => a [String] Float</syntaxhighlight>.

The overall emerging arrow, giving us the total salary, is of type <syntaxhighlight lang="haskell" enclose="none">ArrowXml a => a XmlTree Float</syntaxhighlight>.

=== Running an arrow ===

When we combinate the arrow for reading a sample company from a XML file with the totaling arrow we get:
<syntaxhighlight lang="haskell" source="hxt/Main.hs">
readDocument [] "sampleCompany.xml" >>> total
</syntaxhighlight>

We use <syntaxhighlight lang="haskell" enclose="none">runX :: IOSArrow XmlTree c -> IO [c]</syntaxhighlight> for running this arrow in IO. The function returns all results of a given arrow in a list. Because we except this list to be a singleton list, we can write:

<syntaxhighlight lang="haskell" source="hxt/Main.hs">
[ttl] <- runX ( readDocument [] "sampleCompany.xml" 
                >>> total )
</syntaxhighlight>
<syntaxhighlight lang="haskell" enclose="none">ttl</syntaxhighlight> holds the total salary of a sample company.

== Architecture ==

[this!!Total.hs] provides the arrow for totaling salaries as described in the illustration section. [this!!Cut.hs] contains a transformation arrow for cutting salaries. [this!!Main.hs] collects test scenarios for totaling and cutting XML data provided by [this!!sampleCompany.xml]

== Usage ==

* [this!!Main.hs] has to be loaded into GHCi. 
* The <syntaxhighlight lang="haskell" enclose="none">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' for [[test automation]].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:XML]]
* [[uses::Technology:GHCi]]
* [[uses::Technology:HXT]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:Thomas Schmorleiz]]
* [[instanceOf::Theme:Haskell potpourri]]
* [[instanceOf::Namespace:Contribution]]