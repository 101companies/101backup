== Headline ==

Solve the [[search problem]] by leveraging that the input list is sorted


== Illustration ==

Consider this implementation of binary search in [[Language:Haskell]]

<syntaxhighlight lang="haskell>
-- Polymorphic binary search
search :: Ord a => [a] -> a -> Bool
search [] _ = False
search xs x =
   if x < y then search ys1 x
   else if x > y then search ys2 x
   else True
  where
    ys1 = take l xs
    (y:ys2) = drop l xs
    l = length xs `div` 2
</syntaxhighlight>

The implemented search function can be applied as follows:

<syntaxhighlight lang="haskell">
-- Illustrate binary search
main = do
  let input = [1,2,3,4,4]
  print $ search input 1 -- True
  print $ search input 5 -- False
</syntaxhighlight>

Note that the input list is readily sorted. The less efficient, [[linear search]] does not require the input list to be sorted.


== Citation ==

(http://en.wikipedia.org/wiki/Binary_search_algorithm, 21 April 2013)

In computer science, a binary search or half-interval search algorithm finds the position of a specified value (the input "key") within a sorted array. [...] In each step, the algorithm compares the input key value with the key value of the middle element of the array. If the keys match, then a matching element has been found so its index, or position, is returned. Otherwise, if the sought key is less than the middle element's key, then the algorithm repeats its action on the sub-array to the left of the middle element or, if the input key is greater, on the sub-array to the right. If the remaining array to be searched is reduced to zero, then the key cannot be found in the array and a special "Not found" indication is returned.


== Metadata ==

* [[identifies::http://en.wikipedia.org/wiki/Binary_search_algorithm]]
* [[instanceOf::Search algorithm]]
* [[relatesTo::Search problem]]
* [[relatesTo::Linear search]]
* [[instanceOf::Namespace:Concept]]