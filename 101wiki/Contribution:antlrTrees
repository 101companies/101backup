== Headline ==

Parsing text to trees and walk them with [[Technology:ANTLR]]
== Characteristics ==

Both concrete and abstract syntax is defined for companies.
To this end, we use an ANTLR-based parser description.
The resulting context-free parsing implements [[Feature:Parsing]].
The abstract syntax is based on ANTLR's homogeneous tree format.
A constructed tree can be walked with an ANTLR tree grammar to total all salaries or to cut salaries in half.
== Illustration ==

The data model is implemented as plain textual files:

<fragment url="inputs/sample.Company"/>

A Parser for [[Feature:Company]] will be generated by [[Technology:ANTLR]] using src/main/antlr/Company.g:

A Compony is defined by:

<syntaxhighlight lang="antlr">
company :
  'company' STRING '{' department* '}'
  -> ^(COMPANY STRING department*)
  ;
  
department :
  'department' name=STRING '{' 
    manager
    ('employee' employee)*
    department*
  '}'
  -> ^(DEPT $name manager employee* department*)
  ;
    
manager : 
  'manager' employee 
  -> ^(MANAGER employee)
  ;   
    
employee :
  n=STRING '{'
    'address' a=STRING
    'salary' s=FLOAT
  '}'
  -> ^(EMPLOYEE $n $a $s)
  ;

STRING  :   '"' (~'"')* '"';
FLOAT   :   ('0'..'9')+ ('.' ('0'..'9')+)?;
WS      :   (' '|'\r'? '\n'|'\t')+ {skip();};
</syntaxhighlight>

[[Feature:Parsing]] is implemented using the generated Parser:

<fragment url="src/main/java/org/softlang/company/features/Parsing.java"/>

[[Feature:Total]] and [[Feature:Cut]] are implemented using classes generated by ANTLR tree grammars (see TotalCompany.g and CutCompany.g):

<syntaxhighlight lang="antlr">
tree grammar TotalCompany;

options { 
  tokenVocab=Company;
  ASTLabelType=CommonTree;
}

@header {
package org.softlang.company.antlr;
}

@members {

public double total = 0;

}

company :
  ^(COMPANY STRING dept*)
  ;
  
dept :
  ^(DEPT STRING manager employee* dept*)
  ;
    
manager : 
  ^(MANAGER employee)
  ;   
    
employee :
  ^(EMPLOYEE STRING STRING FLOAT)
  { total += Double.parseDouble($FLOAT.text); }
  ;
</syntaxhighlight>

<syntaxhighlight lang="antlr">
tree grammar CutCompany;

options { 
  tokenVocab=Company;
  ASTLabelType=CommonTree;
  output = AST;
  filter=true;
  backtrack=true;
}

@header {
package org.softlang.company.antlr;
}
    
// START: strategy
topdown : employee;
// END: strategy
        
employee :
  ^(EMPLOYEE STRING STRING s=FLOAT)
  -> ^(EMPLOYEE STRING STRING FLOAT[Double.toString(Double.parseDouble($s.text) / 2.0d)])
  ;
</syntaxhighlight>

<fragment url="src/main/java/org/softlang/company/features/Total.java/class/Total/method/total"/>

<fragment url="src/main/java/org/softlang/company/features/Cut.java/class/Cut/method/cut"/>

Test cases are implemented for all [[Namespace:Feature]]s. There is also an invalid input:

<fragment url="inputs/nonSample.Company"/>
== Relationships ==

This contribution shows [[Feature:Total]] and [[Feature:Cut]] with tree walking using [[Technology:ANTLR]] and [[Language:Java]].

For plain syntax checking see [[Contribution:antlrAcceptor]].

For a basic example of lexing/tokenization see [[Contribution:antlrLexer]].

For an implementation of [[Feature:Parsing]] with semantic actions see [[Contribution:antlrParser]].

For [[Object-Text mapping]] with [[Technology:ANTLR]] see [[Contribution:antlrObjects]].
== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/antlr contains grammar files for [[Technology:ANTLR]].
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.antlr for [[Technology:ANTLR]]-generated Java classes (post build).
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.
== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md
== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[instanceOf::Theme:ANTLR]]
* [[instanceOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:Ralf LÃ¤mmel]]
* [[instanceOf::Namespace:Contribution]]