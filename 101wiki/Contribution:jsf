== Headline ==

[[Web programming]] with [[Technology:JSF]]

== Motivation ==

This contribution covers the popular approach for [[web programming]] with [[Technology:JSF]]. [[Technology:JSF]] has a great support for the development of [[user interface]]s in the [[MVC]] context. This implementation is considered as a typical [[Language:Java]] based implementation with an amount of related and commonly used [[Technology|technologies]] like the [[Technology:Hibernate]] [[Feature:Persistence|persistence]] [[API]] and the [[Technology:GlassFish]] [[Application server|application server]].

== Illustration ==

The main architecture is based on the [[MVC]] pattern. [[Technology:JSF]] itself is focussed on the view and the controller. The [[user interface]] (view) is provided by [[Technology:Facelets|facelets]], which is based on the [[Language:XHTML]] dialect. A facelet contains the necessary [[GUI]] components for the specific view and connects them to the corresponding methods of the backend [[Technology:Java Bean|Java Beans]] (model). The data provided by the Java Beans is stored within a [[Technology:MySQL]] database, accessible through [[Technology:Hibernate]] with the help of [[DAO]]s (data access objects). The following sections provide a specific description of the involved parts.

=== GUI development ===

Facelets provide [[Language:HTML]] page generation. Since the XML tags for the JSF components can not be displayed by the browser, they have to be changed to corresponding HTML tags via component aliasing. The following example shows the JSF components needed for total and cut of a company:

<syntaxhighlight lang="xml" source="jsf/jsf/web/company.xhtml">
<h:outputLabel for="total" value="Total:"/>
<h:outputText id="total" value="#{companyBean.total}"/>
<h:commandButton value="cut" actionListener="#{companyBean.cut()}"/>
</syntaxhighlight>

The three elements model the GUI components for the label "Total", the textfield for the [[Feature:Total]] and the button for the [[Feature:Cut]]. For example, the <syntaxhighlight lang="xml" enclose="none"><h:commandButton .../></syntaxhighlight> is transformed into the HTML tag <syntaxhighlight lang="xml" enclose="none"><input .../></syntaxhighlight>. The communication between [[Client|client]] and [[Server|server]] is provided by [[Technology:XMLHttpRequest]]. The needed [[Language:JavaScript]] files are automatically generated by the framework.

There is no need to implement the controller since it is provided by the [[Technology:Servlet API]] used within the JSF framework.

=== Managed Beans ===

The previously introduced command button "cut" invokes the corresponding method <syntaxhighlight lang="java" enclose="none">cut</syntaxhighlight> in the Java Bean <syntaxhighlight lang="java" enclose="none">CompanyBean</syntaxhighlight>. In context of JSF, such beans are called Managed Beans:

<syntaxhighlight lang="java" source="jsf/jsf/src/java/company/beans/jsf/CompanyBean.java">
@ManagedBean(name = "companyBean")
@RequestScoped
public class CompanyBean {

	...

	// This is the set of employees for the whole company (loaded previously by the method "loadCompany(int id))".
	private Set<Employee> employees;
	
	...

	// The method returns the current value for total of the loaded company.
	public double getTotal() {
		return total;
	}

	// The method cuts all employees of the loaded company.
	public void cut() {
		// Here we retrieve the session and begin the transaction with Hibernate.
		HibernateUtil.getSessionFactory().getCurrentSession().beginTransaction();
		DAOFactory daoFactory = DAOFactory.instance(DAOFactory.HIBERNATE);
		// The employeeDAO manages the database interaction.
		EmployeeDAO employeeDAO = daoFactory.getEmployeeDAO();

		// This loop iterates over the previously loaded employees and persists the new salary values.
		for (Employee employee : employees) {
			employee.setSalary(employee.getSalary() / 2);
			employeeDAO.makePersistent(employee);
		}
    
		total = total / 2;

		// Finally, we commit and close the transaction.
		HibernateUtil.getSessionFactory().getCurrentSession().getTransaction().commit();
	}

	...

}
</syntaxhighlight>

The class <syntaxhighlight lang="java" enclose="none">CompanyBean</syntaxhighlight> encapsulates the server-side business methods for the application. Responses for ''GET'' requests are provided by simple Java ''getters'' (e. g. <syntaxhighlight lang="java" enclose="none">getTotal()</syntaxhighlight>). ''POST'' requests are handled by corresponding methods (e. g. <syntaxhighlight lang="java" enclose="none">cut()</syntaxhighlight>) or by Java ''setters''.

The two [[Annotation|annotations]] for the class provide the following features:
* <syntaxhighlight lang="java" enclose="none">@ManagedBean</syntaxhighlight> annotates, that the bean is a managed bean in the context of JSF. The attribute <syntaxhighlight lang="java" enclose="none">name</syntaxhighlight> provides the ''connection point'' useable within the facelets.
* <syntaxhighlight lang="java" enclose="none">@RequestScope</syntaxhighlight> annotates, that every new request affecting the <syntaxhighlight lang="java" enclose="none">CompanyBean</syntaxhighlight> will create a new instance.

The [[Application server|application server]] [[Technology:GlassFish]] provides the necessary container for the beans and manages the application.

=== Persistence ===

The principle of the DAO pattern is the exchangeability of the persistence layer. This is provided by a <syntaxhighlight lang="java" enclose="none">DAOFactory</syntaxhighlight>, which instantiates the specific DAOs for the used persistence technology. In our case, the technology is [[Technology:Hibernate]]. According to the interface [this!!jsf/java/company/dao/interfaces/generic/GenericDAO.java GenericDAO.java], every implemented DAO provides the methods to load an entity either by id or by example, to load all entities corresponding to a specific class, or to persist a given entity.

<syntaxhighlight lang="java" source="jsf/jsf/java/company/dao/interfaces/generic/GenericDAO.java">
T findById(ID id, boolean lock);
List<T> findAll();
List<T> findByExample(T exampleInstance);
T makePersistent(T entity);
void makeTransient(T entity);
</syntaxhighlight>

The <syntaxhighlight lang="java" enclose="none">T</syntaxhighlight> stands for either the class <syntaxhighlight lang="java" enclose="none">Company</syntaxhighlight>, or the class <syntaxhighlight lang="java" enclose="none">Department</syntaxhighlight>, or the class <syntaxhighlight lang="java" enclose="none">Employee</syntaxhighlight>. The concrete methods for Hibernate are implemented in [this!!jsf/java/company/dao/hibernate/generic/GenericDAOHibernate.java GenericDAOHibernate.java]. This structure enables the Java Beans to perform data-affecting actions mostly independent from the persistence implementation:

<syntaxhighlight lang="java" source="jsf/jsf/src/java/company/beans/jsf/CompanyBean.java">
@ManagedBean(name = "companyBean")
@RequestScoped
public class CompanyBean {
        
	...

	public void cut() {
		// There has to be a transaction before creating hibernate requests.
		HibernateUtil.getSessionFactory().getCurrentSession().beginTransaction();

		// Retrieve the Hibernate DAOFactory for creating the employee DAO.
		DAOFactory daoFactory = DAOFactory.instance(DAOFactory.HIBERNATE);
		EmployeeDAO employeeDAO = daoFactory.getEmployeeDAO();
        
		// Cut all employees and save them.
		for (Employee employee : employees) {
			employee.setSalary(employee.getSalary() / 2);
			employeeDAO.makePersistent(employee);
		}
        
		// Calculate new total value.
		total = total / 2;

		// The transaction commits the data and ends.
		HibernateUtil.getSessionFactory().getCurrentSession().getTransaction().commit();
	}

	...

}
</syntaxhighlight>

There is an issue to be solved in the future: The transaction should be invoked by annotations or any automated transaction management instead of using corresponding methods with the help of <syntaxhighlight lang="java" enclose="none">HibernateUtil</syntaxhighlight>. If there is no Hibernate persistence, the calls will lead to exceptions.

== Architecture ==

The [[Technology:Facelets|facelets]] ([this!!jsf/web/company.xhtml company.xhtml], [this!!jsf/web/department.xhtml department.xhtml], [this!!jsf/web/employee.xhtml employee.xhtml]) are located in the folder ''jsf/web/''. There is a [this!!jsf/web/template.xhtml template.xhtml] as well, which arranges the main [[User interface|UI]] components of each view. The folder ''jsf/web/resources/css/'' contains the corresponding [[Language:CSS]] files.

The navigation between the different [[Technology:Facelets|facelets]] is managed with the help of the file ''faces-config.xml'', while the starting page and the class for the controller [[Technology:Servlet API|servlet]] is defined in the [this!!jsf/web/WEB-INF/web.xml web.xml].

The ''jsf/src/java/'' folder contains all relevant code for the realization of the main [[@feature|features]] (except [[Feature:Browsing]]):

* The ''hibernate.cfg.xml'' defines the necessary data for the [[DBMS]] connection and the [[Class|classes]] for [[Technology:Hibernate|hibernate]] [[Mapping|mapping]].

* The folder ''src/java/company/beans/jsf/'' contains the three [[Technology:Java Bean|beans]] ([this!!jsf/src/java/company/beans/jsf/CompanyBean.java CompanyBean.java], [this!!jsf/src/java/company/beans/jsf/DepartmentBean.java DepartmentBean.java], [this!!jsf/src/java/company/beans/jsf/EmployeeBean.java EmployeeBean.java]) necessary for handling the companies, departments and employees.

* The [this!!jsf/src/java/company/classes] folder contains the relevant [[Class|classes]] for the instantiation of the [[Feature:Hierarchical_company]].

* The [this!!jsf/src/java/company/dao] folder contains all necessary classes and factories for the exchangablility of the data model corresponding to the [[DAO]] [[Design pattern|design pattern]].

== Usage ==

You need an sql-server to use this application. In this tutorial both will be handled by XAMPP (http://www.apachefriends.org/en/xampp.html).

You can use the ''company.sql'' and ''sampleCompany.sql'' of [[Contribution:html5tree]] for the jsf project.

* Download and install XAMPP
* Open the "XAMPP Control Panel" and start "Apache" and "MySQL"
* Use the guideline of [[Contribution:mySqlMany]] up to "Populate tables..."

After the database is running, follow the next steps:

* To start the application, you have to download the sources from github
* Open the project with [[Technology:NetBeans]] (http://netbeans.org/)
* Select the project, right click and ''run''
* The glassfish-server (and a browser window) with the application will start automatically

The project is implemented with [[Technology:NetBeans]] 7.0.1. You will need the full version with an installed [[Technology:GlassFish]] [[Application server]].

== Metadata ==

* [[instanceOf::Theme:Web programming]]
* [[uses::Language:Java]]
* [[uses::Language:XHTML]]
* [[uses::Language:CSS]]
* [[uses::Language:XML]]
* [[uses::Language:JavaScript]]
* [[uses::Technology:JSF]]
* [[uses::Technology:Hibernate]]
* [[uses::Technology:Java EE]]
* [[uses::Technology:NetBeans]]
* [[uses::Technology:GlassFish]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Persistence]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Web UI]]
* [[instanceOf::Web application]]
* [[instanceOf::Theme:Web applications in Java]]
* [[developedBy::Contributor:Tobias Zimmer]]
* [[instanceOf::Namespace:Contribution]]