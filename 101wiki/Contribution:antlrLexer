== Headline ==

Lexer-based processing with [[Technology:ANTLR]].

== Characteristics ==

A lexer for companies is defined. The lexer is, of course, oblivious to the precise structure of companies. Simple queries are expressible nevertheless. That is, [[Feature:Total]] can be implemented by searching for number tokens.

== Illustration ==

The data model is implemented as plain textual files:

<fragment url="inputs/sample.Company"/>

A Parser for [[Feature:Company]] will be generated by [[Technology:ANTLR]] using src/main/antlr/Company.g.

Tokens in a Company:

<syntaxhighlight lang="antlr">
COMPANY     : 'company';
DEPARTMENT  : 'department';
EMPLOYEE    : 'employee';
MANAGER     : 'manager';
ADDRESS     : 'address';
SALARY      : 'salary';
OPEN        : '{';
CLOSE       : '}';
WS          :   (' '|'\r'? '\n'|'\t')+;
STRING      :   '"' (~'"')* '"';
FLOAT       : DIGIT+ ('.' DIGIT+)?;

fragment DIGIT : ('0'..'9'); 
</syntaxhighlight>

[[Feature:Parsing]] is implemented using the generated Parser:

<fragment url="src/main/java/org/softlang/company/features/Parsing.java/class/Parsing"/>

[[Feature:Total]] is implemented as [[Feature:Parsing]] with a semantic action (summing up numbers):

<fragment url="src/main/java/org/softlang/company/features/Total.java/class/Total"/>

Test cases are implemented for all [[Namespace:Feature]]s. There is also an invalid input:

<fragment url="inputs/nonSample.Company"/>

== Relationships ==

For plain syntax checking with [[Technology:ANTLR]] see [[Contribution:antlrAcceptor]].

For lexer-based text processing in pure [[Language:Java]] see [[Contribution:javaScanner]].


For lexing/tokenization with [[Technology:ANTLR]] see [[Contribution:antlrLexer]].

For a custom made lexer in pure [[Language:Java]] see [[Contribution:javaLexer]].


For parsing with semantic actions with [[Technology:ANTLR]] see [[Contribution:antlrParser]].

For recursive-descent parsing in pure [[Language:Java]] see [[Contribution:javaParser]].

For parser combinators in pure [[Language:Java]] see [[Contribution:javaParseLib]].


For object/text mapping from test to companies with [[Technology:ANTLR]] see [[Contribution:antlrObjects]].

For object/text mapping from text to trees with [[Technology:ANTLR]] see [[Contribution:antlrTrees]].

== Architecture ==

The contribution follows a standardized structure:
* src/main/antlr contains grammar files for [[Technology:ANTLR]].
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.antlr for [[Technology:ANTLR]]-generated Java classes (post build).
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[instanceOf::Theme:ANTLR]]
* [[instanceOf::Theme:Java mapping]]

* [[developedBy::Contributor:Ralf LÃ¤mmel]]
* [[instanceOf::Namespace:Contribution]]