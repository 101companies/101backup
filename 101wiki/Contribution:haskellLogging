== Headline ==

[[Logging]] in [[Language:Haskell]] with non-[[monad|monadic]] code
== Characteristics ==

Starting from a straightforward family of functions for cutting salaries, the concern of logging the salary changes is incorporated into the functions such that the function results are enriched by the log entries for salary changes. This code is relatively verbose and implies poor abstraction. In particular, functionality for composing logs is scattered all over the functions. Ultimately, such a problem must be addressed with [[monad]]s.
== Illustration ==

Salary changes can be tracked in logs as follows:

<syntaxhighlight lang="haskell">
type Log = [LogEntry]

data LogEntry = 
     LogEntry {
       name :: String, 
       oldSalary :: Float,
       newSalary :: Float 
     }
  deriving (Show)
</syntaxhighlight>

Here are a few entries resulting from a salary cut for the sample company:

<syntaxhighlight lang="haskell">
[LogEntry {name = "Craig", oldSalary = 123456.0, newSalary = 61728.0},
 LogEntry {name = "Erik", oldSalary = 12345.0, newSalary = 6172.5},
 LogEntry {name = "Ralf", oldSalary = 1234.0, newSalary = 617.0},
 LogEntry {name = "Ray", oldSalary = 234567.0, newSalary = 117283.5},
 LogEntry {name = "Klaus", oldSalary = 23456.0, newSalary = 11728.0},
 LogEntry {name = "Karl", oldSalary = 2345.0, newSalary = 1172.5},
 LogEntry {name = "Joe", oldSalary = 2344.0, newSalary = 1172.0}]
</syntaxhighlight>

Given a log, the median of salary deltas can be computed as follows:

<syntaxhighlight lang="haskell">
log2median :: Log -> Float
log2median = median . log2deltas

log2deltas :: Log -> [Float]
log2deltas = sort . map delta
  where
    delta entry = newSalary entry - oldSalary entry
</syntaxhighlight>

The above log reduces to the following median:

<syntaxhighlight lang="haskell">
-6172.5
</syntaxhighlight>

[[Feature:Cut]] is implemented in logging-enabled fashion as follows:

<syntaxhighlight lang="haskell">
cut :: Company -> (Company, Log)
cut (Company n ds) = (Company n ds', log)
  where
   (ds', logs) = unzip (map cutD ds)
   log = concat logs
   cutD :: Department -> (Department, Log)
   cutD (Department n m ds es)
     = (Department n m' ds' es', log)
     where
       (m',log1) = cutE m
       (ds', logs2) = unzip (map cutD ds)
       (es', logs3) = unzip (map cutE es)
       log = concat ([log1]++logs2++logs3)
       cutE :: Employee -> (Employee, Log)
       cutE (Employee n a s) = (e', log)
         where
           e' = Employee n a s'
           s' = s/2
           log = [ LogEntry { 
                     name = n,
                     oldSalary = s,
                     newSalary = s'
                 } ]
</syntaxhighlight>

Thus, all functions return a regular data item (i.e., some part of the company) and a corresponding log. When lists of company parts are processed with map, then the lists of results must be unzipped (to go from a list of pairs to a pair of lists). In the function for departments, multiple logs arise for parts a department; these intermediate logs must be composed.
== Relationships ==

* See [[Contribution:haskellComposition]] for the corresponding contribution that does not yet involve logging. The data model is preserved in the present contribution, but the functions for cutting salaries had to be rewritten since the logging concern crosscuts the function.
* See [[Contribution:haskellWriter]] for a variation on the present contribution, which leverages a writer [[monad]], though, for conciseness and proper abstraction.
== Architecture ==

There are these Haskell modules:

* Company.hs: the data model reused from [[Contribution:haskellComposition]].
* Cut.hs: the combined implementation of [[Feature:Cut]] and [[Feature:Logging]].
* Log.hs: types and functions for logs of salary changes needed for [[Feature:Logging]].
* Main.hs: demonstration of all functions.

The contribution relies on the hackage package [http://hackage.haskell.org/packages/archive/hstats/latest/doc/html/Math-Statistics.html hstats].
== Usage ==

See [[Contribution:haskellComposition]].

The "Makefile" provides an extra "install" target for installing the hackage package ''hstats''.
== Metadata ==

* [[uses::Language:Haskell]] 
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Logging]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:Ralf LÃ¤mmel]]
* [[instanceOf::Theme:Haskell introduction]]

