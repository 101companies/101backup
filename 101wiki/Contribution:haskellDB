== Headline ==

Schema-aware [[database programming]] with [[Technology:HaskellDB]]

== Motivation ==

The implementation demonstrates schema-aware [[database programming]] in  [[Language:Haskell]] with [[Technology:HaskellDB]]. That is, the [[database schema]] of a [[database]] for companies is mapped to Haskell types. Database queries are expressed as Haskell functions on top of Haskell types that are derived by [[Technology:DBDirect]], which is part of [[Technology:HaskellDB]]. The functions leverage HaskellDB's library for [[relational algebra]] and other [[CRUD]] expressiveness. For comparison, see [[Contribution:hdbc]] for a demonstration of ''schema-unaware'' database programming in Haskell where database queries are expressed in [[Language:SQL]] whose execution is embedded into Haskell. [[Technology:DBDirect]] derives one module per database table. These modules are the basis for accessing the database within the Haskell program in a schema-aware manner. For instance, operations for totaling and cutting salaries are implemented with the module for employees and while leveraging combinators for projection, selection, aggregation, and renaming. With the use of relational algebra and library functions for other CRUD expressiveness, all operations are effectively independent of the underlying [[DBMS]] <cite>bringert2004student</cite>. The connection to the underlining [[Technology:MySQL]] database is achieved by means of a "HaskellDB-[[Technology:HDBC]]-[[Technology:ODBC]]" back-end.

== Illustration ==

=== Connecting to the database ===

We provide a function to connect to a database and execute an action:

<syntaxhighlight lang="haskell" source="haskellDB/MyConnection.hs">
execute :: (Database -> IO a) -> IO a
execute = connect driver conf
  where           
    conf = [ ("Driver","MySQL ODBC 5.1 Driver")
           , ("Port","3306")
           , ("Server", "localhost")
           , ("User", "root")
           , ("Database", "101companies") ]
</syntaxhighlight>

We use <syntaxhighlight lang="haskell" enclose="none">connect</syntaxhighlight> and <syntaxhighlight lang="haskell" enclose="none">driver</syntaxhighlight>, which are both provided by the HDBC-ODBC back-end.
By looking at the return type of the function one can see that any database function of type <syntaxhighlight lang="haskell" enclose="none">Database -> IO a</syntaxhighlight> can be applied to <syntaxhighlight lang="haskell" enclose="none">execute</syntaxhighlight> resulting in the specified IO action and possibly a result of type <syntaxhighlight lang="haskell" enclose="none">a</syntaxhighlight>. By encapsulating the connection process like this we achieve complete independence from the underling database implementation for all queries and statements. 

=== DBDirect ===

We use the DBDirect command <syntaxhighlight lang="make" enclose="none">dbdirect-hdbc-odbc</syntaxhighlight> (see the usage section for the complete command). This command generates a module describing the database by naming tables and fields. Compiling this module with GHC creates one module per table, each module holding actual variables for tables and fields. These variables are the basis for the following totaling query.

=== Totaling ===

We import the description modules for the companies and employees tables:

<syntaxhighlight lang="haskell" source="haskellDB/Total.hs">
import qualified DBDesc.Employee as E
import qualified DBDesc.Company as C
</syntaxhighlight>

We define a special field for storing the sum of all salaries:

<syntaxhighlight lang="haskell" source="haskellDB/Total.hs">
data Ttl = Ttl

instance FieldTag Ttl where fieldName   = "ttl"
  
ttl :: Attr Ttl Double
ttl = mkAttr Ttl  
</syntaxhighlight>

We declare <syntaxhighlight lang="haskell" enclose="none">Ttl</syntaxhighlight> to be an instance of the <syntaxhighlight lang="haskell" enclose="none">FieldTag</syntaxhighlight> class by specifying what the name of the field should be. We use this field and HaskellDB's <syntaxhighlight lang="haskell" enclose="none">mkAttr</syntaxhighlight> to define an attribute <syntaxhighlight lang="haskell" enclose="none">ttl</syntaxhighlight> for holding a <syntaxhighlight lang="haskell" enclose="none">Double</syntaxhighlight> value.
The actual total query is defined as follows:

<syntaxhighlight lang="haskell" source="haskellDB/Total.hs">
total :: String -> Query (Rel (RecCons Ttl (Expr Double) RecNil))
total cname = do 
  es <- table E.employee
  cs <- table C.company

  restrict $
    ( fromNull (constant 0) (cs!C.xid) .==. es!E.cid 
      .&&. 
      cs!C.name .==. constant cname )

  project (ttl <<  sum (es!E.salary))
</syntaxhighlight>

We are working in the <syntaxhighlight lang="haskell" enclose="none">Query</syntaxhighlight> monad. The <syntaxhighlight lang="haskell" enclose="none">table</syntaxhighlight> functions return all records in the given table. Using two tables gives us the relational cross product of those tables lines 3 and 4. We use HaskellDB's selection function <syntaxhighlight lang="haskell" enclose="none">restrict</syntaxhighlight> in line 6-9 to select only those rows in which the company-id of the employee is equal to the company which has the given name <syntaxhighlight lang="haskell" enclose="none">cname</syntaxhighlight>. By making use of <syntaxhighlight lang="haskell" enclose="none">project</syntaxhighlight> in line 11 we only select the salary column and then use the aggregation function <syntaxhighlight lang="haskell" enclose="none"> sum</syntaxhighlight> to total all salaries. After that we put the total value in <syntaxhighlight lang="haskell" enclose="none">ttl</syntaxhighlight>. 

=== Executing the query ===

We use <syntaxhighlight lang="haskell" enclose="none">query</syntaxhighlight> and <syntaxhighlight lang="haskell" enclose="none">execute</syntaxhighlight> to execute the totaling query:

<syntaxhighlight lang="haskell" source="haskellDB/Main.hs">
let cname = "meganalysis"
[res] <- execute $ (flip $ query) $ total cname
</syntaxhighlight>

This gives us a list (which we expect to be a singleton list) of records. We can now access the <syntaxhighlight lang="haskell" enclose="none">ttl</syntaxhighlight> attribute of the record <syntaxhighlight lang="haskell" enclose="none">res</syntaxhighlight> by using the <syntaxhighlight lang="haskell" enclose="none">(!)</syntaxhighlight>-operator and print the total value:

<syntaxhighlight lang="haskell" source="haskellDB/Main.hs">
print $ res!ttl
</syntaxhighlight>

== Architecture ==

We provide MySQL-scripts to create (see [this!!Company.sql]) company tables and populate (see [this!!Meganalysis.sql]) these tables. [this!!Total.hs] and [this!!Cut.hs] provide totaling and cutting functionality using HaskellDB's relational algebra library. [this!!MyConnection.hs] encapsulates the process of connecting to the MySQL database. [this!!Main.hs] collects test scenarios for totaling and cutting.

== Usage ==

=== Setup ===

* Follow the steps of setting up the database as described in the usage section for the [[Contribution:hdbc|hdbc]] implementation.

=== Generating the database description ===

* Execute the following command in the implementation folder: 
<syntaxhighlight lang="make">
dbdirect-hdbc-odbc "DBDesc" "DBDesc" \
                "Driver=MySQL ODBC 5.1 Driver;\
		Port=3306;\
		Server=localhost;\
		User=root;\
		Database=101companies"
</syntaxhighlight>
* Compile the ''DBDesc'' module using GHC: <syntaxhighlight lang="make" enclose="none">ghc DBDesc</syntaxhighlight>

=== Testing ===

* [this!!Main.hs] has to be loaded into GHCi. 
* The <syntaxhighlight lang="haskell" enclose="none">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' covering both database descriptions generation and testing.

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:SQL]]
* [[uses::Technology:HaskellDB]]
* [[uses::Technology:ODBC]]
* [[uses::Technology:HDBC]]
* [[uses::Technology:DBDirect]]
* [[uses::Technology:MySQL]]
* [[uses::Technology:GHC]]
* [[uses::Technology:GHCi]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Persistence]]
* [[implements::Feature:Mapping]]
* [[developedBy::Contributor:Thomas Schmorleiz]]
* [[instanceOf::Theme:Haskell potpourri]]
* [[cites::http://doi.acm.org/10.1145/1017472.1017473]]
* [[instanceOf::Namespace:Contribution]]