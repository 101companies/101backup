== Headline ==

[[Technology:CGI]] style [[Web programming]] in [[Language:Haskell]]
== Motivation ==

The implementation demonstrates [[Technology:CGI]] style [[web programming]] in [[Language:Haskell]].
We make use of a CGI [[library]] for Haskell. A [[Language:XHTML]] combinator [[library]] is used for the composition of dynamic web pages. The [[@system]] is implemented as a [[web application]] using a [[client-server architecture]]. The company is stored in a client-side [[cookie]]. (The server initializes the cookie with a sample company.) The [[server]] processes HTTP requests from and returns HTTP responses to a web client using the CGI technology. Request parameters are extracted from the request's URL in the sense of [[Technology:HTTP]]'s GET parameters. The user can either request to view a company, department, or employee; the user can also cut salaries or save edits in the selected scope. The part to be viewed, cut or saved is specified by making use of a [[Zipper]]-inspired focus concept that is also leveraged by [[Contribution:wxHaskell]]. Such a focus parameter is included into the URL.
== Illustration ==

The server is set up as follows:

<syntaxhighlight lang="haskell" line>
main = runCGI $ handleErrors cgiMain
</syntaxhighlight>

We use a default error handler provided by the CGI library ''Network.CGI''. <syntaxhighlight lang="haskell" enclose="none">cgiMain</syntaxhighlight> is the main request handler, which is shown in the next section.
In the following we will demonstrate how a specific request is processed by the server.

=== Cutting an employee's salary ===

'''Scenario:''' After receiving an employee view the user clicks the cut button in the browser. The browser sends a request to the server using this URL:

''<nowiki>http://localhost/cgi-bin/HaskellCgi/company.cgi?focus=EmployeeFocus%20[1,0,0]%200&</nowiki>''
''<nowiki>action=Cut</nowiki>''

Because of the fact that the CGI library does not support any extraction of information out of the URL path (as opposed to the [[Contribution:happstack|happstack]] implementation), parameters are encoded as URL parameters:

* The action (here <syntaxhighlight lang="haskell" enclose="none">Cut</syntaxhighlight>)
* The focus (here <syntaxhighlight lang="haskell" enclose="none">EmployeeFocus [1,0,0]</syntaxhighlight>)

==== Main request handler ====

The main request handler is defined as follows:

<syntaxhighlight lang="haskell" line>
cgiMain :: CGI CGIResult
cgiMain =  do
    f <- getInput "focus"
    let focusP = maybe CompanyFocus read f
    a <- getInput "action"
    let actionP = maybe View read a
    chtml <- (doAction actionP) focusP
    let title = "101companies WebApp" 
    output $ renderHtml $ page title $ chtml
      where
        doAction ap = case ap of
          View  -> doView
          Cut   -> doCut
          Save  -> doSave 
</syntaxhighlight>

We are working inside the <syntaxhighlight lang="haskell" enclose="none">CGI</syntaxhighlight> monad, which is provided by the CGI library. In lines 3 and 5 <syntaxhighlight lang="haskell" enclose="none">getInput :: MonadCGI m => String -> m (Maybe String)</syntaxhighlight> tries to get the focus and action input parameters as <syntaxhighlight lang="haskell" enclose="none">String</syntaxhighlight> values, which we process in lines 4 and 6. If a parameter is set, that is, <syntaxhighlight lang="haskell" enclose="none">getInput</syntaxhighlight> returns <syntaxhighlight lang="haskell" enclose="none">Just a</syntaxhighlight>, we <syntaxhighlight lang="haskell" enclose="none">read</syntaxhighlight> the String to values of <syntaxhighlight lang="haskell" enclose="none">Focus</syntaxhighlight> and <syntaxhighlight lang="haskell" enclose="none">Action</syntaxhighlight>. If a parameters is not set, we use a default focus respectively a default action. 

We call <syntaxhighlight lang="haskell" enclose="none">doAction</syntaxhighlight>, which is defined in lines 11-14. Based on the <syntaxhighlight lang="haskell" enclose="none">Action</syntaxhighlight> value <syntaxhighlight lang="haskell" enclose="none">doAction</syntaxhighlight> returns one of the action functions <syntaxhighlight lang="haskell" enclose="none">doView</syntaxhighlight>, <syntaxhighlight lang="haskell" enclose="none">doCut</syntaxhighlight> or <syntaxhighlight lang="haskell" enclose="none">doSave</syntaxhighlight>. In this scenario the <syntaxhighlight lang="haskell" enclose="none">case</syntaxhighlight> expression matches on <syntaxhighlight lang="haskell" enclose="none">Cut</syntaxhighlight> and <syntaxhighlight lang="haskell" enclose="none">doAction</syntaxhighlight> returns <syntaxhighlight lang="haskell" enclose="none">doCut</syntaxhighlight>. <syntaxhighlight lang="haskell" enclose="none">cgiMain</syntaxhighlight> applies the focus to the action function in line 7. The action function returns an <syntaxhighlight lang="haskell" enclose="none">Html</syntaxhighlight> value, which is used in line 9 as the content of a new page, rendered to an HTML document and returned as the <syntaxhighlight lang="haskell" enclose="none">CGIResult</syntaxhighlight>.

==== Cutting the cookie ====

The function <syntaxhighlight lang="haskell" enclose="none">doCut</syntaxhighlight> performs the actual cut action on the company cookie:

<syntaxhighlight lang="haskell">
doCut :: Focus -> CGI Html
doCut f = do
    c <- tryReadCCookie
    let cutC = readCutWrite f c   
    writeCCookie cutC
    return $ html f cutC
</syntaxhighlight>

The company cookie is read using <syntaxhighlight lang="haskell" enclose="none">tryReadCCookie</syntaxhighlight>:

<syntaxhighlight lang="haskell" line>
tryReadCCookie = liftM (fromMaybe company) $ 
                 readCookie "companyCookie"
</syntaxhighlight>

This function tries to read the company cookie. If the client does not have this cookie stored, the default company is returned.
In line 4 <syntaxhighlight lang="haskell" enclose="none">doCut</syntaxhighlight> calls <syntaxhighlight lang="haskell" enclose="none">readCutWrite</syntaxhighlight>, which reads a company, department or employee based on the focus, cuts it and replaces it within the company (see [this!!Cut.hs] for details). In line 5 the manipulated company is written back into the cookie using <syntaxhighlight lang="haskell" enclose="none">writeCCookie</syntaxhighlight>:

<syntaxhighlight lang="haskell" line>
writeCCookie s = setCookie $ 
                 newCookie "companyCookie" $ 
                 show s    
</syntaxhighlight>

==== Returning HTML ====

After the company data is saved in the cookie <syntaxhighlight lang="haskell" enclose="none">doCut</syntaxhighlight> calls <syntaxhighlight lang="haskell" enclose="none">html</syntaxhighlight> passing the focus and the new company:

<syntaxhighlight lang="haskell" line>
html :: Focus -> Company -> Html
html f = case f of 
  CompanyFocus        -> companyHtml f
  (DeptFocus  )       -> deptHtml f
  (EmployeeFocus    ) -> employeeHtml f
  (ManagerFocus  )    -> employeeHtml f   
</syntaxhighlight>

Based on the focus <syntaxhighlight lang="haskell" enclose="none">html</syntaxhighlight> calls one of the functions for composing HTML. In this scenario <syntaxhighlight lang="haskell" enclose="none">case</syntaxhighlight> matches on <syntaxhighlight lang="haskell" enclose="none">(EmployeeFocus    )</syntaxhighlight> and <syntaxhighlight lang="haskell" enclose="none">employeeHtml</syntaxhighlight> is called. This function composes HTML for the employee in question using various HTML combinators (see [this!!CompanyHtml.hs] for details).

== Architecture ==

In [this!!Main.hs] the server is set up using request handlers provided by [this!!Response.hs]. The save actions are performed by functionality hosted by [this!!Save.hs]. An algebraic datatype for actions is definied in [this!!Types.hs]. HTML pages are composed in [this!!CompanyHtml.hs].
The algebraic datatype for companies can be found in [this!!Company.hs]. [this!!Focus.hs] provides a focus datatype and functions on top of it. A sample company can be found in [this!!SampleCompany.hs]. [this!!Cut.hs] and [this!!Total.hs] provide cut and total functionality.

== Usage ==

* First you need a webserver. In the following we explain the steps for XAMPP<cite>xampp</cite>.
* Compile [this!!Main.hs] to a CGI file using GHC: <syntaxhighlight lang="make">ghc --make -o company.cgi Main.hs</syntaxhighlight>
* Place ''company.cgi'' in the folder ''cgi-bin'' of your XAMPP installation.
* Place [this!!style.css] in the folder ''htdocs'' of your XAMPP installation.
* Open ''http://localhost/cgi-bin/haskellCGI/company.cgi'' in a web browser to see the application's root view.
Compiling the project is scripted by the ''run'' target in [this!!Makefile.hs].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:XHTML]]
* [[uses::Language:CSS]]
* [[uses::Technology:CGI]]
* [[uses::Technology:GHC]]      
* [[uses::Technology:XAMPP]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Web UI]]
* [[developedBy::Contributor:Thomas Schmorleiz]]
* [[instanceOf::Web application]]
* [[instanceOf::Namespace:Contribution]]
